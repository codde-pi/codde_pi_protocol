// Mocks generated by Mockito 5.4.2 from annotations
// in codde_protocol/test/codde_protocol_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:codde_protocol/src/api/models/frame.dart' as _i4;
import 'package:codde_protocol/src/api/protocols/client/com_socket.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ComSocketClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockComSocketClient extends _i1.Mock implements _i2.ComSocketClient {
  MockComSocketClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set move(bool? move) => super.noSuchMethod(
        Invocation.setter(
          #move,
          move,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isDisposed => (super.noSuchMethod(
        Invocation.getter(#isDisposed),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<void> connect({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
          {#hint: hint},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> disconnect({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
          {#hint: hint},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i4.ResultFrame?> receive({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #receive,
          [],
          {#hint: hint},
        ),
        returnValue: _i3.Future<_i4.ResultFrame?>.value(),
      ) as _i3.Future<_i4.ResultFrame?>);

  @override
  _i3.Future<void> send({
    required _i4.Frame? data,
    dynamic hint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [],
          {
            #data: data,
            #hint: hint,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  int cstEncode({bool? move}) => (super.noSuchMethod(
        Invocation.method(
          #cstEncode,
          [],
          {#move: move},
        ),
        returnValue: 0,
      ) as int);

  @override
  int sseEncode({bool? move}) => (super.noSuchMethod(
        Invocation.method(
          #sseEncode,
          [],
          {#move: move},
        ),
        returnValue: 0,
      ) as int);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

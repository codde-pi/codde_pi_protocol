// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'base/error.dart';
import 'base/frame.dart';
import 'base/protocol.dart';
import 'base/widget_registry.dart';
import 'client/codde_pi_client.dart';
import 'client/com.dart';
import 'client/com_socket.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0';

  @override
  int get rustContentHash => 2005077855;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'codde_protocol',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateClientCoddePiClientCoddePiClientDummy(
      {required Protocol protocol, required String addr});

  Future<ComSocketClient> crateClientCoddePiClientCoddePiClientUseSocket(
      {required String address});

  String crateClientComSocketComSocketClientAutoAccessorGetAddress(
      {required ComSocketClient that});

  ClientStatus crateClientComSocketComSocketClientAutoAccessorGetStatus(
      {required ComSocketClient that});

  void crateClientComSocketComSocketClientAutoAccessorSetAddress(
      {required ComSocketClient that, required String address});

  void crateClientComSocketComSocketClientAutoAccessorSetStatus(
      {required ComSocketClient that, required ClientStatus status});

  Future<void> crateClientComSocketComSocketClientConnect(
      {required ComSocketClient that});

  Future<void> crateClientComSocketComSocketClientDisconnect(
      {required ComSocketClient that});

  Future<bool> crateClientComSocketComSocketClientIsConnected(
      {required ComSocketClient that});

  ComSocketClient crateClientComSocketComSocketClientNew(
      {required String address});

  Future<ResultFrame?> crateClientComSocketComSocketClientReceive(
      {required ComSocketClient that});

  Future<ResultFrame?> crateClientComSocketComSocketClientRequest(
      {required ComSocketClient that, required Frame data});

  Future<void> crateClientComSocketComSocketClientSend(
      {required ComSocketClient that, required Frame data});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ComSocketClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ComSocketClient;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ComSocketClientPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateClientCoddePiClientCoddePiClientDummy(
      {required Protocol protocol, required String addr}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_protocol(protocol, serializer);
        sse_encode_String(addr, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateClientCoddePiClientCoddePiClientDummyConstMeta,
      argValues: [protocol, addr],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateClientCoddePiClientCoddePiClientDummyConstMeta =>
      const TaskConstMeta(
        debugName: "codde_pi_client_dummy",
        argNames: ["protocol", "addr"],
      );

  @override
  Future<ComSocketClient> crateClientCoddePiClientCoddePiClientUseSocket(
      {required String address}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(address, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerComSocketClient,
        decodeErrorData: null,
      ),
      constMeta: kCrateClientCoddePiClientCoddePiClientUseSocketConstMeta,
      argValues: [address],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateClientCoddePiClientCoddePiClientUseSocketConstMeta =>
      const TaskConstMeta(
        debugName: "codde_pi_client_use_socket",
        argNames: ["address"],
      );

  @override
  String crateClientComSocketComSocketClientAutoAccessorGetAddress(
      {required ComSocketClient that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerComSocketClient(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateClientComSocketComSocketClientAutoAccessorGetAddressConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateClientComSocketComSocketClientAutoAccessorGetAddressConstMeta =>
          const TaskConstMeta(
            debugName: "ComSocketClient_auto_accessor_get_address",
            argNames: ["that"],
          );

  @override
  ClientStatus crateClientComSocketComSocketClientAutoAccessorGetStatus(
      {required ComSocketClient that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerComSocketClient(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_client_status,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateClientComSocketComSocketClientAutoAccessorGetStatusConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateClientComSocketComSocketClientAutoAccessorGetStatusConstMeta =>
          const TaskConstMeta(
            debugName: "ComSocketClient_auto_accessor_get_status",
            argNames: ["that"],
          );

  @override
  void crateClientComSocketComSocketClientAutoAccessorSetAddress(
      {required ComSocketClient that, required String address}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerComSocketClient(
            that, serializer);
        sse_encode_String(address, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateClientComSocketComSocketClientAutoAccessorSetAddressConstMeta,
      argValues: [that, address],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateClientComSocketComSocketClientAutoAccessorSetAddressConstMeta =>
          const TaskConstMeta(
            debugName: "ComSocketClient_auto_accessor_set_address",
            argNames: ["that", "address"],
          );

  @override
  void crateClientComSocketComSocketClientAutoAccessorSetStatus(
      {required ComSocketClient that, required ClientStatus status}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerComSocketClient(
            that, serializer);
        sse_encode_client_status(status, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateClientComSocketComSocketClientAutoAccessorSetStatusConstMeta,
      argValues: [that, status],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateClientComSocketComSocketClientAutoAccessorSetStatusConstMeta =>
          const TaskConstMeta(
            debugName: "ComSocketClient_auto_accessor_set_status",
            argNames: ["that", "status"],
          );

  @override
  Future<void> crateClientComSocketComSocketClientConnect(
      {required ComSocketClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerComSocketClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_server_state_error,
      ),
      constMeta: kCrateClientComSocketComSocketClientConnectConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateClientComSocketComSocketClientConnectConstMeta =>
      const TaskConstMeta(
        debugName: "ComSocketClient_connect",
        argNames: ["that"],
      );

  @override
  Future<void> crateClientComSocketComSocketClientDisconnect(
      {required ComSocketClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerComSocketClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_server_state_error,
      ),
      constMeta: kCrateClientComSocketComSocketClientDisconnectConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateClientComSocketComSocketClientDisconnectConstMeta =>
      const TaskConstMeta(
        debugName: "ComSocketClient_disconnect",
        argNames: ["that"],
      );

  @override
  Future<bool> crateClientComSocketComSocketClientIsConnected(
      {required ComSocketClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerComSocketClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateClientComSocketComSocketClientIsConnectedConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateClientComSocketComSocketClientIsConnectedConstMeta =>
      const TaskConstMeta(
        debugName: "ComSocketClient_is_connected",
        argNames: ["that"],
      );

  @override
  ComSocketClient crateClientComSocketComSocketClientNew(
      {required String address}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(address, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerComSocketClient,
        decodeErrorData: null,
      ),
      constMeta: kCrateClientComSocketComSocketClientNewConstMeta,
      argValues: [address],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateClientComSocketComSocketClientNewConstMeta =>
      const TaskConstMeta(
        debugName: "ComSocketClient_new",
        argNames: ["address"],
      );

  @override
  Future<ResultFrame?> crateClientComSocketComSocketClientReceive(
      {required ComSocketClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerComSocketClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_result_frame,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateClientComSocketComSocketClientReceiveConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateClientComSocketComSocketClientReceiveConstMeta =>
      const TaskConstMeta(
        debugName: "ComSocketClient_receive",
        argNames: ["that"],
      );

  @override
  Future<ResultFrame?> crateClientComSocketComSocketClientRequest(
      {required ComSocketClient that, required Frame data}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerComSocketClient(
            that, serializer);
        sse_encode_box_autoadd_frame(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_result_frame,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateClientComSocketComSocketClientRequestConstMeta,
      argValues: [that, data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateClientComSocketComSocketClientRequestConstMeta =>
      const TaskConstMeta(
        debugName: "ComSocketClient_request",
        argNames: ["that", "data"],
      );

  @override
  Future<void> crateClientComSocketComSocketClientSend(
      {required ComSocketClient that, required Frame data}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerComSocketClient(
            that, serializer);
        sse_encode_box_autoadd_frame(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_server_state_error,
      ),
      constMeta: kCrateClientComSocketComSocketClientSendConstMeta,
      argValues: [that, data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateClientComSocketComSocketClientSendConstMeta =>
      const TaskConstMeta(
        debugName: "ComSocketClient_send",
        argNames: ["that", "data"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ComSocketClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerComSocketClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ComSocketClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerComSocketClient;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  ComSocketClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerComSocketClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ComSocketClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ComSocketClient
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerComSocketClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ComSocketClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ComSocketClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerComSocketClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ComSocketClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ComSocketClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerComSocketClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ComSocketClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  ClientCom dco_decode_TraitDef_ClientCom(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  Coord dco_decode_box_autoadd_coord(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_coord(raw);
  }

  @protected
  Frame dco_decode_box_autoadd_frame(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_frame(raw);
  }

  @protected
  ResultFrame dco_decode_box_autoadd_result_frame(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_result_frame(raw);
  }

  @protected
  ClientStatus dco_decode_client_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientStatus.values[raw as int];
  }

  @protected
  CoddePiClient dco_decode_codde_pi_client(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return CoddePiClient();
  }

  @protected
  Coord dco_decode_coord(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Coord(
      x: dco_decode_f_32(arr[0]),
      y: dco_decode_f_32(arr[1]),
    );
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  Frame dco_decode_frame(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Frame(
      id: dco_decode_u_8(arr[0]),
      data: dco_decode_widget_registry(arr[1]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  ResultFrame? dco_decode_opt_box_autoadd_result_frame(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_result_frame(raw);
  }

  @protected
  Protocol dco_decode_protocol(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Protocol.values[raw as int];
  }

  @protected
  ResultFrame dco_decode_result_frame(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ResultFrame(
      id: dco_decode_u_8(arr[0]),
      status: dco_decode_server_status(arr[1]),
      data: dco_decode_result_registry(arr[2]),
    );
  }

  @protected
  ResultRegistry dco_decode_result_registry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return ResultRegistry_ConfirmResult(
          status: dco_decode_bool(raw[1]),
        );
      case 1:
        return ResultRegistry_ErrorResult(
          error: dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  ServerStateError dco_decode_server_state_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ServerStateError(
      field0: dco_decode_String(arr[0]),
    );
  }

  @protected
  ServerStatus dco_decode_server_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ServerStatus.values[raw as int];
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  WidgetRegistry dco_decode_widget_registry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return WidgetRegistry_ClickButton();
      case 1:
        return WidgetRegistry_ToggleButton(
          value: dco_decode_bool(raw[1]),
        );
      case 2:
        return WidgetRegistry_ConfirmButton();
      case 3:
        return WidgetRegistry_PressButton(
          pressed: dco_decode_bool(raw[1]),
        );
      case 4:
        return WidgetRegistry_DirectionalButton(
          direction: dco_decode_u_8(raw[1]),
        );
      case 5:
        return WidgetRegistry_Joystick(
          delta: dco_decode_box_autoadd_coord(raw[1]),
          intensity: dco_decode_f_32(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  ComSocketClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerComSocketClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ComSocketClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ComSocketClient
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerComSocketClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ComSocketClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ComSocketClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerComSocketClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ComSocketClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ComSocketClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerComSocketClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ComSocketClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  Coord sse_decode_box_autoadd_coord(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_coord(deserializer));
  }

  @protected
  Frame sse_decode_box_autoadd_frame(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_frame(deserializer));
  }

  @protected
  ResultFrame sse_decode_box_autoadd_result_frame(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_result_frame(deserializer));
  }

  @protected
  ClientStatus sse_decode_client_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return ClientStatus.values[inner];
  }

  @protected
  CoddePiClient sse_decode_codde_pi_client(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CoddePiClient();
  }

  @protected
  Coord sse_decode_coord(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_x = sse_decode_f_32(deserializer);
    var var_y = sse_decode_f_32(deserializer);
    return Coord(x: var_x, y: var_y);
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  Frame sse_decode_frame(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_8(deserializer);
    var var_data = sse_decode_widget_registry(deserializer);
    return Frame(id: var_id, data: var_data);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  ResultFrame? sse_decode_opt_box_autoadd_result_frame(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_result_frame(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Protocol sse_decode_protocol(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Protocol.values[inner];
  }

  @protected
  ResultFrame sse_decode_result_frame(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_8(deserializer);
    var var_status = sse_decode_server_status(deserializer);
    var var_data = sse_decode_result_registry(deserializer);
    return ResultFrame(id: var_id, status: var_status, data: var_data);
  }

  @protected
  ResultRegistry sse_decode_result_registry(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_status = sse_decode_bool(deserializer);
        return ResultRegistry_ConfirmResult(status: var_status);
      case 1:
        var var_error = sse_decode_String(deserializer);
        return ResultRegistry_ErrorResult(error: var_error);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  ServerStateError sse_decode_server_state_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    return ServerStateError(field0: var_field0);
  }

  @protected
  ServerStatus sse_decode_server_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return ServerStatus.values[inner];
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  WidgetRegistry sse_decode_widget_registry(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return WidgetRegistry_ClickButton();
      case 1:
        var var_value = sse_decode_bool(deserializer);
        return WidgetRegistry_ToggleButton(value: var_value);
      case 2:
        return WidgetRegistry_ConfirmButton();
      case 3:
        var var_pressed = sse_decode_bool(deserializer);
        return WidgetRegistry_PressButton(pressed: var_pressed);
      case 4:
        var var_direction = sse_decode_u_8(deserializer);
        return WidgetRegistry_DirectionalButton(direction: var_direction);
      case 5:
        var var_delta = sse_decode_box_autoadd_coord(deserializer);
        var var_intensity = sse_decode_f_32(deserializer);
        return WidgetRegistry_Joystick(
            delta: var_delta, intensity: var_intensity);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerComSocketClient(
          ComSocketClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ComSocketClientImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerComSocketClient(
          ComSocketClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ComSocketClientImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerComSocketClient(
          ComSocketClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ComSocketClientImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerComSocketClient(
          ComSocketClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ComSocketClientImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_coord(Coord self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_coord(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_frame(Frame self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_frame(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_result_frame(
      ResultFrame self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_result_frame(self, serializer);
  }

  @protected
  void sse_encode_client_status(ClientStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_codde_pi_client(
      CoddePiClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_coord(Coord self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_32(self.x, serializer);
    sse_encode_f_32(self.y, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_frame(Frame self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self.id, serializer);
    sse_encode_widget_registry(self.data, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_box_autoadd_result_frame(
      ResultFrame? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_result_frame(self, serializer);
    }
  }

  @protected
  void sse_encode_protocol(Protocol self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_result_frame(ResultFrame self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self.id, serializer);
    sse_encode_server_status(self.status, serializer);
    sse_encode_result_registry(self.data, serializer);
  }

  @protected
  void sse_encode_result_registry(
      ResultRegistry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case ResultRegistry_ConfirmResult(status: final status):
        sse_encode_i_32(0, serializer);
        sse_encode_bool(status, serializer);
      case ResultRegistry_ErrorResult(error: final error):
        sse_encode_i_32(1, serializer);
        sse_encode_String(error, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_server_state_error(
      ServerStateError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.field0, serializer);
  }

  @protected
  void sse_encode_server_status(ServerStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_widget_registry(
      WidgetRegistry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case WidgetRegistry_ClickButton():
        sse_encode_i_32(0, serializer);
      case WidgetRegistry_ToggleButton(value: final value):
        sse_encode_i_32(1, serializer);
        sse_encode_bool(value, serializer);
      case WidgetRegistry_ConfirmButton():
        sse_encode_i_32(2, serializer);
      case WidgetRegistry_PressButton(pressed: final pressed):
        sse_encode_i_32(3, serializer);
        sse_encode_bool(pressed, serializer);
      case WidgetRegistry_DirectionalButton(direction: final direction):
        sse_encode_i_32(4, serializer);
        sse_encode_u_8(direction, serializer);
      case WidgetRegistry_Joystick(
          delta: final delta,
          intensity: final intensity
        ):
        sse_encode_i_32(5, serializer);
        sse_encode_box_autoadd_coord(delta, serializer);
        sse_encode_f_32(intensity, serializer);
      default:
        throw UnimplementedError('');
    }
  }
}

@sealed
class ComSocketClientImpl extends RustOpaque implements ComSocketClient {
  // Not to be used by end users
  ComSocketClientImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ComSocketClientImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ComSocketClient,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ComSocketClient,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ComSocketClientPtr,
  );

  String get address => RustLib.instance.api
          .crateClientComSocketComSocketClientAutoAccessorGetAddress(
        that: this,
      );

  ClientStatus get status => RustLib.instance.api
          .crateClientComSocketComSocketClientAutoAccessorGetStatus(
        that: this,
      );

  void set address(String address) => RustLib.instance.api
      .crateClientComSocketComSocketClientAutoAccessorSetAddress(
          that: this, address: address);

  void set status(ClientStatus status) => RustLib.instance.api
      .crateClientComSocketComSocketClientAutoAccessorSetStatus(
          that: this, status: status);

  Future<void> connect() =>
      RustLib.instance.api.crateClientComSocketComSocketClientConnect(
        that: this,
      );

  Future<void> disconnect() =>
      RustLib.instance.api.crateClientComSocketComSocketClientDisconnect(
        that: this,
      );

  Future<bool> isConnected() =>
      RustLib.instance.api.crateClientComSocketComSocketClientIsConnected(
        that: this,
      );

  Future<ResultFrame?> receive() =>
      RustLib.instance.api.crateClientComSocketComSocketClientReceive(
        that: this,
      );

  /// Expose method twice for Dart port
  /// Rust Flutter Bridge only read direct struct implementations
  Future<ResultFrame?> request({required Frame data}) => RustLib.instance.api
      .crateClientComSocketComSocketClientRequest(that: this, data: data);

  Future<void> send({required Frame data}) => RustLib.instance.api
      .crateClientComSocketComSocketClientSend(that: this, data: data);
}

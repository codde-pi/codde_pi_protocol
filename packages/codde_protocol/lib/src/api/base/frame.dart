// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'widget_registry.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `fmt`

class Frame {
  final int id;
  final WidgetRegistry data;

  const Frame({
    required this.id,
    required this.data,
  });

  Future<Uint8List> bufferize() =>
      RustLib.instance.api.crateApiBaseFrameFrameBufferize(
        that: this,
      );

  Future<String> identity() =>
      RustLib.instance.api.crateApiBaseFrameFrameIdentity(
        that: this,
      );

  static Future<Frame?> parse({required List<int> data}) =>
      RustLib.instance.api.crateApiBaseFrameFrameParse(data: data);

  @override
  int get hashCode => id.hashCode ^ data.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Frame &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          data == other.data;
}

/// Since ResultFrame is instanciated by private methods, it doesn't implement `[pyclass]`
class ResultFrame {
  final int id;
  final ServerStatus status;
  final ResultRegistry data;

  const ResultFrame({
    required this.id,
    required this.status,
    required this.data,
  });

  Future<Uint8List> bufferize() =>
      RustLib.instance.api.crateApiBaseFrameResultFrameBufferize(
        that: this,
      );

  static Future<ResultFrame?> parse({required List<int> data}) =>
      RustLib.instance.api.crateApiBaseFrameResultFrameParse(data: data);

  @override
  int get hashCode => id.hashCode ^ status.hashCode ^ data.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ResultFrame &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          status == other.status &&
          data == other.data;
}

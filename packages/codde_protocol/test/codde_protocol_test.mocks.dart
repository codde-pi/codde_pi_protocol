// Mocks generated by Mockito 5.4.4 from annotations
// in codde_protocol/test/codde_protocol_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:codde_protocol/src/base/frame.dart' as _i6;
import 'package:codde_protocol/src/base/widget_registry.dart' as _i4;
import 'package:codde_protocol/src/client/com_socket.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ComSocketClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockComSocketClient extends _i1.Mock implements _i2.ComSocketClient {
  MockComSocketClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get address => (super.noSuchMethod(
        Invocation.getter(#address),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#address),
        ),
      ) as String);

  @override
  _i4.ClientStatus get status => (super.noSuchMethod(
        Invocation.getter(#status),
        returnValue: _i4.ClientStatus.connected,
      ) as _i4.ClientStatus);

  @override
  set address(String? address) => super.noSuchMethod(
        Invocation.setter(
          #address,
          address,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set status(_i4.ClientStatus? status) => super.noSuchMethod(
        Invocation.setter(
          #status,
          status,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isDisposed => (super.noSuchMethod(
        Invocation.getter(#isDisposed),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<void> connect() => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> disconnect() => (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<bool> isConnected() => (super.noSuchMethod(
        Invocation.method(
          #isConnected,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<_i6.ResultFrame?> receive() => (super.noSuchMethod(
        Invocation.method(
          #receive,
          [],
        ),
        returnValue: _i5.Future<_i6.ResultFrame?>.value(),
      ) as _i5.Future<_i6.ResultFrame?>);

  @override
  _i5.Future<_i6.ResultFrame?> request({required _i6.Frame? data}) =>
      (super.noSuchMethod(
        Invocation.method(
          #request,
          [],
          {#data: data},
        ),
        returnValue: _i5.Future<_i6.ResultFrame?>.value(),
      ) as _i5.Future<_i6.ResultFrame?>);

  @override
  _i5.Future<void> send({required _i6.Frame? data}) => (super.noSuchMethod(
        Invocation.method(
          #send,
          [],
          {#data: data},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

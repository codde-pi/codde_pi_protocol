// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.24.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'server.dart';
part 'widget_registry.freezed.dart';

Future<String> actionIdentity(
        {required int id, required Str widget, dynamic hint}) =>
    RustLib.instance.api.actionIdentity(id: id, widget: widget, hint: hint);

Future<(int, String)> extractIdentity({required String value, dynamic hint}) =>
    RustLib.instance.api.extractIdentity(value: value, hint: hint);

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<str>>
@sealed
class Str extends RustOpaque {
  Str.dcoDecode(List<dynamic> wire) : super.dcoDecode(wire, _kStaticData);

  Str.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Str,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Str,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_StrPtr,
  );
}

class ConfirmResult {
  final bool status;

  const ConfirmResult({
    required this.status,
  });

  @override
  int get hashCode => status.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ConfirmResult &&
          runtimeType == other.runtimeType &&
          status == other.status;
}

@freezed
sealed class ResultBinding with _$ResultBinding {
  const factory ResultBinding.confirm(
    ConfirmResult field0,
  ) = ResultBinding_Confirm;
}

@freezed
sealed class ResultRegistry with _$ResultRegistry {
  const factory ResultRegistry.confirmResult({
    required bool status,
  }) = ResultRegistry_ConfirmResult;
}

enum ServerStatus {
  idle,
  busy,
  error,
}

@freezed
sealed class WidgetRegistry with _$WidgetRegistry {
  const factory WidgetRegistry.clickButton() = WidgetRegistry_ClickButton;
  const factory WidgetRegistry.toggleButton({
    required bool value,
  }) = WidgetRegistry_ToggleButton;
  const factory WidgetRegistry.confirmButton() = WidgetRegistry_ConfirmButton;
}

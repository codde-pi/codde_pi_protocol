// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.24.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/models/frame.dart';
import 'api/models/server.dart';
import 'api/models/widget_registry.dart';
import 'api/protocols/client/codde_pi_client.dart';
import 'api/protocols/client/com_socket.dart';
import 'api/protocols/server.dart';
import 'api/protocols/server/codde_pi_server.dart';
import 'api/protocols/server/com_socket.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0-dev.24';

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'codde_protocol',
    ioDirectory: 'codde_protocol/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<Uint8List> frameBufferize({required Frame that, dynamic hint});

  Future<String> frameIdentity({required Frame that, dynamic hint});

  Future<Frame?> frameParse({required U8 data, dynamic hint});

  Future<Uint8List> resultFrameBufferize(
      {required ResultFrame that, dynamic hint});

  Future<ResultFrame> resultFrameNew(
      {required int id,
      required ServerStatus status,
      required PyPyAny data,
      dynamic hint});

  Future<ResultFrame?> resultFrameParse({required U8 data, dynamic hint});

  Future<Self> serverStateErrorNoStream({dynamic hint});

  Future<void> executeAction(
      {required WidgetAction acts, required Frame frame, dynamic hint});

  Future<Self> resultRegistryFromBinding(
      {required ResultBinding binding, dynamic hint});

  Future<String> actionIdentity(
      {required int id, required Str widget, dynamic hint});

  Future<(int, String)> extractIdentity({required String value, dynamic hint});

  Future<ComSocketClient> coddePiClientUseSocket(
      {required Str address, dynamic hint});

  Future<ComSocketClient> comSocketClientNew(
      {required Str address, dynamic hint});

  Future<ComSocketServer> coddePiServerUseSocket(
      {required Str address, dynamic hint});

  Future<ServerProtocol> comSocketServerOpen(
      {required String address,
      required Map<String, Action> actions,
      dynamic hint});

  Future<void> comSocketServerCallback(
      {required ComSocketServer that,
      required int id,
      required ServerStatus status,
      required PyPyAny data,
      dynamic hint});

  Future<void> comSocketServerClose(
      {required ComSocketServer that, dynamic hint});

  Future<ComSocketServer> comSocketServerNew(
      {required Str address, dynamic hint});

  Future<void> comSocketServerOpen(
      {required ComSocketServer that, dynamic hint});

  Future<void> comSocketServerServe(
      {required ComSocketServer that, dynamic hint});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ComSocketServer;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ComSocketServer;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ComSocketServerPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PyPyAny;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PyPyAny;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PyPyAnyPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Self;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Self;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SelfPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_T;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_T;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_TPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_TcpStream;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_TcpStream;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_TcpStreamPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WidgetAction;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WidgetAction;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_WidgetActionPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FnSWidgetRegistryResult;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FnSWidgetRegistryResult;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FnSWidgetRegistryResultPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Str;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Str;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_StrPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_U8;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_U8;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_U8Ptr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<Uint8List> frameBufferize({required Frame that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_frame(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kFrameBufferizeConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrameBufferizeConstMeta => const TaskConstMeta(
        debugName: "Frame_bufferize",
        argNames: ["that"],
      );

  @override
  Future<String> frameIdentity({required Frame that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_frame(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kFrameIdentityConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrameIdentityConstMeta => const TaskConstMeta(
        debugName: "Frame_identity",
        argNames: ["that"],
      );

  @override
  Future<Frame?> frameParse({required U8 data, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLocku8(
            data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_frame,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kFrameParseConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrameParseConstMeta => const TaskConstMeta(
        debugName: "Frame_parse",
        argNames: ["data"],
      );

  @override
  Future<Uint8List> resultFrameBufferize(
      {required ResultFrame that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_result_frame(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kResultFrameBufferizeConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kResultFrameBufferizeConstMeta => const TaskConstMeta(
        debugName: "ResultFrame_bufferize",
        argNames: ["that"],
      );

  @override
  Future<ResultFrame> resultFrameNew(
      {required int id,
      required ServerStatus status,
      required PyPyAny data,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8(id, serializer);
        sse_encode_server_status(status, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockPyPyAny(
            data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_result_frame,
        decodeErrorData: null,
      ),
      constMeta: kResultFrameNewConstMeta,
      argValues: [id, status, data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kResultFrameNewConstMeta => const TaskConstMeta(
        debugName: "ResultFrame_new",
        argNames: ["id", "status", "data"],
      );

  @override
  Future<ResultFrame?> resultFrameParse({required U8 data, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLocku8(
            data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_result_frame,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kResultFrameParseConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kResultFrameParseConstMeta => const TaskConstMeta(
        debugName: "ResultFrame_parse",
        argNames: ["data"],
      );

  @override
  Future<Self> serverStateErrorNoStream({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSelf,
        decodeErrorData: null,
      ),
      constMeta: kServerStateErrorNoStreamConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kServerStateErrorNoStreamConstMeta => const TaskConstMeta(
        debugName: "ServerStateError_no_stream",
        argNames: [],
      );

  @override
  Future<void> executeAction(
      {required WidgetAction acts, required Frame frame, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWidgetAction(
            acts, serializer);
        sse_encode_box_autoadd_frame(frame, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kExecuteActionConstMeta,
      argValues: [acts, frame],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExecuteActionConstMeta => const TaskConstMeta(
        debugName: "execute_action",
        argNames: ["acts", "frame"],
      );

  @override
  Future<Self> resultRegistryFromBinding(
      {required ResultBinding binding, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_result_binding(binding, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSelf,
        decodeErrorData: null,
      ),
      constMeta: kResultRegistryFromBindingConstMeta,
      argValues: [binding],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kResultRegistryFromBindingConstMeta => const TaskConstMeta(
        debugName: "ResultRegistry_from_binding",
        argNames: ["binding"],
      );

  @override
  Future<String> actionIdentity(
      {required int id, required Str widget, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8(id, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockstr(
            widget, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kActionIdentityConstMeta,
      argValues: [id, widget],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kActionIdentityConstMeta => const TaskConstMeta(
        debugName: "action_identity",
        argNames: ["id", "widget"],
      );

  @override
  Future<(int, String)> extractIdentity({required String value, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_u_8_string,
        decodeErrorData: null,
      ),
      constMeta: kExtractIdentityConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExtractIdentityConstMeta => const TaskConstMeta(
        debugName: "extract_identity",
        argNames: ["value"],
      );

  @override
  Future<ComSocketClient> coddePiClientUseSocket(
      {required Str address, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockstr(
            address, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_com_socket_client,
        decodeErrorData: null,
      ),
      constMeta: kCoddePiClientUseSocketConstMeta,
      argValues: [address],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCoddePiClientUseSocketConstMeta => const TaskConstMeta(
        debugName: "CoddePiClient_use_socket",
        argNames: ["address"],
      );

  @override
  Future<ComSocketClient> comSocketClientNew(
      {required Str address, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockstr(
            address, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_com_socket_client,
        decodeErrorData: null,
      ),
      constMeta: kComSocketClientNewConstMeta,
      argValues: [address],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kComSocketClientNewConstMeta => const TaskConstMeta(
        debugName: "ComSocketClient_new",
        argNames: ["address"],
      );

  @override
  Future<ComSocketServer> coddePiServerUseSocket(
      {required Str address, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockstr(
            address, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockComSocketServer,
        decodeErrorData: null,
      ),
      constMeta: kCoddePiServerUseSocketConstMeta,
      argValues: [address],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCoddePiServerUseSocketConstMeta => const TaskConstMeta(
        debugName: "CoddePiServer_use_socket",
        argNames: ["address"],
      );

  @override
  Future<ServerProtocol> comSocketServerOpen(
      {required String address,
      required Map<String, Action> actions,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(address, serializer);
        sse_encode_Map_String_action(actions, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_server_protocol,
        decodeErrorData: sse_decode_server_state_error,
      ),
      constMeta: kComSocketServerOpenConstMeta,
      argValues: [address, actions],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kComSocketServerOpenConstMeta => const TaskConstMeta(
        debugName: "ComSocketServer__open",
        argNames: ["address", "actions"],
      );

  @override
  Future<void> comSocketServerCallback(
      {required ComSocketServer that,
      required int id,
      required ServerStatus status,
      required PyPyAny data,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockComSocketServer(
            that, serializer);
        sse_encode_u_8(id, serializer);
        sse_encode_server_status(status, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockPyPyAny(
            data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kComSocketServerCallbackConstMeta,
      argValues: [that, id, status, data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kComSocketServerCallbackConstMeta => const TaskConstMeta(
        debugName: "ComSocketServer_callback",
        argNames: ["that", "id", "status", "data"],
      );

  @override
  Future<void> comSocketServerClose(
      {required ComSocketServer that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockComSocketServer(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kComSocketServerCloseConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kComSocketServerCloseConstMeta => const TaskConstMeta(
        debugName: "ComSocketServer_close",
        argNames: ["that"],
      );

  @override
  Future<ComSocketServer> comSocketServerNew(
      {required Str address, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockstr(
            address, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockComSocketServer,
        decodeErrorData: null,
      ),
      constMeta: kComSocketServerNewConstMeta,
      argValues: [address],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kComSocketServerNewConstMeta => const TaskConstMeta(
        debugName: "ComSocketServer_new",
        argNames: ["address"],
      );

  @override
  Future<void> comSocketServerOpen(
      {required ComSocketServer that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockComSocketServer(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_server_state_error,
      ),
      constMeta: kComSocketServerOpenConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kComSocketServerOpenConstMeta => const TaskConstMeta(
        debugName: "ComSocketServer_open",
        argNames: ["that"],
      );

  @override
  Future<void> comSocketServerServe(
      {required ComSocketServer that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockComSocketServer(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kComSocketServerServeConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kComSocketServerServeConstMeta => const TaskConstMeta(
        debugName: "ComSocketServer_serve",
        argNames: ["that"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ComSocketServer => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockComSocketServer;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ComSocketServer => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockComSocketServer;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PyPyAny => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockPyPyAny;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PyPyAny => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockPyPyAny;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Self =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSelf;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Self =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSelf;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_T => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockT;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_T => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockT;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_TcpStream => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpStream;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_TcpStream => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpStream;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WidgetAction => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWidgetAction;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WidgetAction => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWidgetAction;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FnSWidgetRegistryResult => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockfnsWidgetRegistryResult;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FnSWidgetRegistryResult => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockfnsWidgetRegistryResult;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Str => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockstr;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Str => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockstr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_U8 => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLocku8;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_U8 => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLocku8;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  ComSocketServer
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockComSocketServer(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ComSocketServer.dcoDecode(raw as List<dynamic>);
  }

  @protected
  PyPyAny
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockPyPyAny(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PyPyAny.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Self
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSelf(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Self.dcoDecode(raw as List<dynamic>);
  }

  @protected
  T dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockT(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return T.dcoDecode(raw as List<dynamic>);
  }

  @protected
  TcpStream
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpStream(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TcpStream.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FnSWidgetRegistryResult
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockfnsWidgetRegistryResult(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FnSWidgetRegistryResult.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ComSocketServer
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockComSocketServer(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ComSocketServer.dcoDecode(raw as List<dynamic>);
  }

  @protected
  WidgetAction
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWidgetAction(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WidgetAction.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Str dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockstr(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Str.dcoDecode(raw as List<dynamic>);
  }

  @protected
  U8 dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLocku8(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return U8.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Map<String, Action> dco_decode_Map_String_action(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_action(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  ComSocketServer
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockComSocketServer(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ComSocketServer.dcoDecode(raw as List<dynamic>);
  }

  @protected
  PyPyAny
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockPyPyAny(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PyPyAny.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Self
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSelf(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Self.dcoDecode(raw as List<dynamic>);
  }

  @protected
  T dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockT(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return T.dcoDecode(raw as List<dynamic>);
  }

  @protected
  TcpStream
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpStream(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TcpStream.dcoDecode(raw as List<dynamic>);
  }

  @protected
  WidgetAction
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWidgetAction(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WidgetAction.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FnSWidgetRegistryResult
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockfnsWidgetRegistryResult(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FnSWidgetRegistryResult.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Str dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockstr(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Str.dcoDecode(raw as List<dynamic>);
  }

  @protected
  U8 dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLocku8(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return U8.dcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  Action dco_decode_action(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return Action_RustFn(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockfnsWidgetRegistryResult(
              raw[1]),
        );
      case 1:
        return Action_PythonFn(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockPyPyAny(
              raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  TcpStream
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpStream(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as TcpStream;
  }

  @protected
  ConfirmResult dco_decode_box_autoadd_confirm_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_confirm_result(raw);
  }

  @protected
  Frame dco_decode_box_autoadd_frame(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_frame(raw);
  }

  @protected
  ResultBinding dco_decode_box_autoadd_result_binding(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_result_binding(raw);
  }

  @protected
  ResultFrame dco_decode_box_autoadd_result_frame(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_result_frame(raw);
  }

  @protected
  ComSocketClient dco_decode_com_socket_client(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ComSocketClient(
      address: dco_decode_String(arr[0]),
      stream:
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpStream(
              arr[1]),
    );
  }

  @protected
  ConfirmResult dco_decode_confirm_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ConfirmResult(
      status: dco_decode_bool(arr[0]),
    );
  }

  @protected
  Frame dco_decode_frame(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Frame(
      id: dco_decode_u_8(arr[0]),
      data: dco_decode_widget_registry(arr[1]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, Action)> dco_decode_list_record_string_action(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_action).toList();
  }

  @protected
  TcpStream?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpStream(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpStream(
            raw);
  }

  @protected
  Frame? dco_decode_opt_box_autoadd_frame(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_frame(raw);
  }

  @protected
  ResultFrame? dco_decode_opt_box_autoadd_result_frame(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_result_frame(raw);
  }

  @protected
  (String, Action) dco_decode_record_string_action(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_action(arr[1]),
    );
  }

  @protected
  (int, String) dco_decode_record_u_8_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_u_8(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  ResultBinding dco_decode_result_binding(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return ResultBinding_Confirm(
          dco_decode_box_autoadd_confirm_result(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  ResultFrame dco_decode_result_frame(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ResultFrame(
      id: dco_decode_u_8(arr[0]),
      status: dco_decode_server_status(arr[1]),
      data: dco_decode_result_registry(arr[2]),
    );
  }

  @protected
  ResultRegistry dco_decode_result_registry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return ResultRegistry_ConfirmResult(
          status: dco_decode_bool(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  ServerProtocol dco_decode_server_protocol(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return ServerProtocol_Socket(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockT(
              raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  ServerStateError dco_decode_server_state_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ServerStateError(
      field0: dco_decode_String(arr[0]),
    );
  }

  @protected
  ServerStatus dco_decode_server_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ServerStatus.values[raw as int];
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  int dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  WidgetRegistry dco_decode_widget_registry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return WidgetRegistry_ClickButton();
      case 1:
        return WidgetRegistry_ToggleButton(
          value: dco_decode_bool(raw[1]),
        );
      case 2:
        return WidgetRegistry_ConfirmButton();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  ComSocketServer
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockComSocketServer(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ComSocketServer.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PyPyAny
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockPyPyAny(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PyPyAny.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Self
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSelf(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Self.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  T sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockT(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return T.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TcpStream
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpStream(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TcpStream.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FnSWidgetRegistryResult
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockfnsWidgetRegistryResult(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FnSWidgetRegistryResult.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ComSocketServer
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockComSocketServer(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ComSocketServer.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WidgetAction
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWidgetAction(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WidgetAction.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Str sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockstr(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Str.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  U8 sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLocku8(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return U8.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Map<String, Action> sse_decode_Map_String_action(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_action(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  ComSocketServer
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockComSocketServer(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ComSocketServer.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PyPyAny
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockPyPyAny(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PyPyAny.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Self
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSelf(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Self.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  T sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockT(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return T.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TcpStream
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpStream(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TcpStream.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WidgetAction
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWidgetAction(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WidgetAction.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FnSWidgetRegistryResult
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockfnsWidgetRegistryResult(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FnSWidgetRegistryResult.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Str sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockstr(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Str.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  U8 sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLocku8(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return U8.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  Action sse_decode_action(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockfnsWidgetRegistryResult(
                deserializer);
        return Action_RustFn(var_field0);
      case 1:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockPyPyAny(
                deserializer);
        return Action_PythonFn(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  TcpStream
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpStream(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpStream(
        deserializer));
  }

  @protected
  ConfirmResult sse_decode_box_autoadd_confirm_result(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_confirm_result(deserializer));
  }

  @protected
  Frame sse_decode_box_autoadd_frame(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_frame(deserializer));
  }

  @protected
  ResultBinding sse_decode_box_autoadd_result_binding(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_result_binding(deserializer));
  }

  @protected
  ResultFrame sse_decode_box_autoadd_result_frame(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_result_frame(deserializer));
  }

  @protected
  ComSocketClient sse_decode_com_socket_client(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_address = sse_decode_String(deserializer);
    var var_stream =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpStream(
            deserializer);
    return ComSocketClient(address: var_address, stream: var_stream);
  }

  @protected
  ConfirmResult sse_decode_confirm_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_status = sse_decode_bool(deserializer);
    return ConfirmResult(status: var_status);
  }

  @protected
  Frame sse_decode_frame(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_8(deserializer);
    var var_data = sse_decode_widget_registry(deserializer);
    return Frame(id: var_id, data: var_data);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, Action)> sse_decode_list_record_string_action(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, Action)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_action(deserializer));
    }
    return ans_;
  }

  @protected
  TcpStream?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpStream(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpStream(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  Frame? sse_decode_opt_box_autoadd_frame(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_frame(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ResultFrame? sse_decode_opt_box_autoadd_result_frame(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_result_frame(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (String, Action) sse_decode_record_string_action(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_action(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, String) sse_decode_record_u_8_string(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_8(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  ResultBinding sse_decode_result_binding(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_confirm_result(deserializer);
        return ResultBinding_Confirm(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  ResultFrame sse_decode_result_frame(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_8(deserializer);
    var var_status = sse_decode_server_status(deserializer);
    var var_data = sse_decode_result_registry(deserializer);
    return ResultFrame(id: var_id, status: var_status, data: var_data);
  }

  @protected
  ResultRegistry sse_decode_result_registry(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_status = sse_decode_bool(deserializer);
        return ResultRegistry_ConfirmResult(status: var_status);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  ServerProtocol sse_decode_server_protocol(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockT(
                deserializer);
        return ServerProtocol_Socket(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  ServerStateError sse_decode_server_state_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    return ServerStateError(field0: var_field0);
  }

  @protected
  ServerStatus sse_decode_server_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return ServerStatus.values[inner];
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  int sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint64();
  }

  @protected
  WidgetRegistry sse_decode_widget_registry(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return WidgetRegistry_ClickButton();
      case 1:
        var var_value = sse_decode_bool(deserializer);
        return WidgetRegistry_ToggleButton(value: var_value);
      case 2:
        return WidgetRegistry_ConfirmButton();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ((');
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockComSocketServer(
          ComSocketServer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockPyPyAny(
          PyPyAny self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSelf(
          Self self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockT(
          T self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpStream(
          TcpStream self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockfnsWidgetRegistryResult(
          FnSWidgetRegistryResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockComSocketServer(
          ComSocketServer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWidgetAction(
          WidgetAction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockstr(
          Str self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLocku8(
          U8 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void sse_encode_Map_String_action(
      Map<String, Action> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_action(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockComSocketServer(
          ComSocketServer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockPyPyAny(
          PyPyAny self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSelf(
          Self self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockT(
      T self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpStream(
          TcpStream self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWidgetAction(
          WidgetAction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockfnsWidgetRegistryResult(
          FnSWidgetRegistryResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockstr(
          Str self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLocku8(
      U8 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_action(Action self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Action_RustFn(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockfnsWidgetRegistryResult(
            field0, serializer);
      case Action_PythonFn(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockPyPyAny(
            field0, serializer);
    }
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpStream(
          TcpStream self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpStream(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_confirm_result(
      ConfirmResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_confirm_result(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_frame(Frame self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_frame(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_result_binding(
      ResultBinding self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_result_binding(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_result_frame(
      ResultFrame self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_result_frame(self, serializer);
  }

  @protected
  void sse_encode_com_socket_client(
      ComSocketClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.address, serializer);
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpStream(
        self.stream, serializer);
  }

  @protected
  void sse_encode_confirm_result(ConfirmResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.status, serializer);
  }

  @protected
  void sse_encode_frame(Frame self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self.id, serializer);
    sse_encode_widget_registry(self.data, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_string_action(
      List<(String, Action)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_action(item, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpStream(
          TcpStream? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpStream(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_frame(Frame? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_frame(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_result_frame(
      ResultFrame? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_result_frame(self, serializer);
    }
  }

  @protected
  void sse_encode_record_string_action(
      (String, Action) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_action(self.$2, serializer);
  }

  @protected
  void sse_encode_record_u_8_string(
      (int, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_result_binding(ResultBinding self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case ResultBinding_Confirm(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_confirm_result(field0, serializer);
    }
  }

  @protected
  void sse_encode_result_frame(ResultFrame self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self.id, serializer);
    sse_encode_server_status(self.status, serializer);
    sse_encode_result_registry(self.data, serializer);
  }

  @protected
  void sse_encode_result_registry(
      ResultRegistry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case ResultRegistry_ConfirmResult(status: final status):
        sse_encode_i_32(0, serializer);
        sse_encode_bool(status, serializer);
    }
  }

  @protected
  void sse_encode_server_protocol(
      ServerProtocol self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case ServerProtocol_Socket(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockT(
            field0, serializer);
    }
  }

  @protected
  void sse_encode_server_state_error(
      ServerStateError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.field0, serializer);
  }

  @protected
  void sse_encode_server_status(ServerStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_widget_registry(
      WidgetRegistry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case WidgetRegistry_ClickButton():
        sse_encode_i_32(0, serializer);
      case WidgetRegistry_ToggleButton(value: final value):
        sse_encode_i_32(1, serializer);
        sse_encode_bool(value, serializer);
      case WidgetRegistry_ConfirmButton():
        sse_encode_i_32(2, serializer);
    }
  }
}

// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.30.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import, unused_element

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'widget_registry.freezed.dart';

// The type `ClientStatus` is not used by any `pub` functions, thus it is ignored.

Future<String> actionIdentity(
        {required int id, required Str widget, dynamic hint}) =>
    RustLib.instance.api.actionIdentity(id: id, widget: widget, hint: hint);

Future<(int, String)> extractIdentity({required String value, dynamic hint}) =>
    RustLib.instance.api.extractIdentity(value: value, hint: hint);

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<str>>
@sealed
class Str extends RustOpaque {
  Str.dcoDecode(List<dynamic> wire) : super.dcoDecode(wire, _kStaticData);

  Str.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Str,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Str,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_StrPtr,
  );
}

class Coord {
  final double x;
  final double y;

  const Coord({
    required this.x,
    required this.y,
  });

  @override
  int get hashCode => x.hashCode ^ y.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Coord &&
          runtimeType == other.runtimeType &&
          x == other.x &&
          y == other.y;
}

@freezed
sealed class ResultRegistry with _$ResultRegistry {
  const ResultRegistry._();

  const factory ResultRegistry.confirmResult({
    required bool status,
  }) = ResultRegistry_ConfirmResult;
  const factory ResultRegistry.errorResult({
    required String error,
  }) = ResultRegistry_ErrorResult;
}

enum ServerStatus {
  notInit,
  idle,
  busy,
  error,
}

@freezed
sealed class WidgetRegistry with _$WidgetRegistry {
  const WidgetRegistry._();

  const factory WidgetRegistry.clickButton() = WidgetRegistry_ClickButton;
  const factory WidgetRegistry.toggleButton({
    required bool value,
  }) = WidgetRegistry_ToggleButton;
  const factory WidgetRegistry.confirmButton() = WidgetRegistry_ConfirmButton;
  const factory WidgetRegistry.pressButton({
    required bool pressed,
  }) = WidgetRegistry_PressButton;
  const factory WidgetRegistry.directionalButton({
    required int direction,
  }) = WidgetRegistry_DirectionalButton;
  const factory WidgetRegistry.joystick({
    required Coord delta,
    required double intensity,
  }) = WidgetRegistry_Joystick;

  Future<String> name({dynamic hint}) =>
      RustLib.instance.api.widgetRegistryName(
        that: this,
        hint: hint,
      );
}
